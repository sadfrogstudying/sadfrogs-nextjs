// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model StudySpot {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    isValidated Boolean  @default(false)

    // general (if people submit a study spot they must fill these out)
    name         String  @unique
    slug         String  @unique
    rating       Float   @default(0)
    wifi         Boolean @default(false)
    powerOutlets Boolean @default(false)
    noiseLevel   String  @default("")
    venueType    String  @default("")
    images       Image[] // if StudySpot is deleted, all images are deleted (default behavior)

    // location
    placeId   String @default("")
    latitude  Float  @default(0)
    longitude Float  @default(0)
    address   String @default("")
    country   String @default("")
    city      String @default("")
    state     String @default("")

    // hours
    openingHours OpeningHours[]

    // etiquette
    canStudyForLong String @default("")

    // ambiance
    vibe        String  @default("")
    comfort     String  @default("")
    views       String  @default("")
    sunlight    Boolean @default(false)
    temperature String  @default("")
    music       String  @default("")
    lighting    String  @default("")

    // crowdedness
    distractions String @default("")
    crowdedness  String @default("")

    // surroundings
    naturalSurroundings  String @default("")
    proximityToAmenities String @default("")

    // amenities
    drinks               Boolean @default(false)
    food                 Boolean @default(false)
    studyBreakFacilities String  @default("")

    pendingEditStudySpot PendingEditStudySpot[]
}

model PendingEditStudySpot {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // general (if people submit a study spot they must fill these out)
    name         String?
    slug         String?
    rating       Float?
    wifi         Boolean?
    powerOutlets Boolean?
    noiseLevel   String?
    venueType    String?
    images       Image[] // if StudySpot is deleted, all images are deleted (default behavior)

    // location
    placeId   String?
    latitude  Float?
    longitude Float?
    address   String?
    country   String?
    city      String?
    state     String?

    // hours
    openingHours OpeningHours[]

    // etiquette
    canStudyForLong String?

    // ambiance
    vibe        String?
    comfort     String?
    views       String?
    sunlight    Boolean?
    temperature String?
    music       String?
    lighting    String?

    // crowdedness
    distractions String?
    crowdedness  String?

    // surroundings
    naturalSurroundings  String?
    proximityToAmenities String?

    // amenities
    drinks               Boolean?
    food                 Boolean?
    studyBreakFacilities String?

    studySpot   StudySpot @relation(fields: [studySpotId], references: [id])
    studySpotId Int

    imagesToDelete Image[] @relation(name: "imagesToDelete")

    @@index([studySpotId])
}

model OpeningHours {
    id                     Int                   @id @default(autoincrement())
    day                    Int
    openingTime            String
    closingTime            String
    StudySpot              StudySpot?            @relation(fields: [studySpotId], references: [id], onDelete: Cascade)
    studySpotId            Int?                  @unique
    pendingEditStudySpot   PendingEditStudySpot? @relation(fields: [pendingEditStudySpotId], references: [id])
    pendingEditStudySpotId String?               @unique
}

model Image {
    id             Int    @id @default(autoincrement())
    url            String @unique
    dominantColour String @default("#fff")
    aspectRatio    Float
    height         Int
    width          Int

    studySpot   StudySpot? @relation(fields: [studySpotId], references: [id], onDelete: Cascade)
    studySpotId Int?

    pendingEditStudySpot   PendingEditStudySpot? @relation(fields: [pendingEditStudySpotId], references: [id], onDelete: Cascade)
    pendingEditStudySpotId String?

    pendingEditToDelete   PendingEditStudySpot? @relation(fields: [pendingEditToDeleteId], references: [id], name: "imagesToDelete")
    pendingEditToDeleteId String?

    @@index([studySpotId])
    @@index([pendingEditStudySpotId])
    @@index([pendingEditToDeleteId])
}
