// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                  String        @id @default(cuid())
    username            String        @unique
    email               String        @unique
    description         String        @default("")
    profilePicture      Image?        @relation("ProfilePicture")
    createdSpots        StudySpot[]
    createdPendingEdits PendingEdit[]
    authoredImages      Image[]
}

// model StudySpotDetails {}

model StudySpot {
    id                   Int            @id @default(autoincrement())
    createdAt            DateTime       @default(now())
    updatedAt            DateTime       @updatedAt
    isValidated          Boolean        @default(false)
    images               Image[]
    author               User?          @relation(fields: [authorId], references: [id], onDelete: SetNull)
    authorId             String?
    name                 String         @unique
    slug                 String         @unique
    rating               Float          @default(0)
    wifi                 Boolean        @default(false)
    powerOutlets         Boolean        @default(false)
    noiseLevel           String         @default("")
    venueType            String         @default("")
    placeId              String         @default("")
    latitude             Float          @default(0)
    longitude            Float          @default(0)
    address              String         @default("")
    country              String         @default("")
    city                 String         @default("")
    state                String         @default("")
    openingHours         OpeningHours[]
    canStudyForLong      String         @default("")
    vibe                 String         @default("")
    comfort              String         @default("")
    views                String         @default("")
    sunlight             Boolean        @default(false)
    temperature          String         @default("")
    music                String         @default("")
    lighting             String         @default("")
    distractions         String         @default("")
    crowdedness          String         @default("")
    naturalSurroundings  String         @default("")
    proximityToAmenities String         @default("")
    drinks               Boolean        @default(false)
    food                 Boolean        @default(false)
    studyBreakFacilities String         @default("")

    pendingEditStudySpot PendingEdit[]

    @@index([authorId])
}

model PendingEdit {
    id                   String         @id @default(cuid())
    createdAt            DateTime       @default(now())
    updatedAt            DateTime       @updatedAt
    author               User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId             String
    name                 String?
    slug                 String?
    rating               Float?
    wifi                 Boolean?
    powerOutlets         Boolean?
    noiseLevel           String?
    venueType            String?
    placeId              String?
    latitude             Float?
    longitude            Float?
    address              String?
    country              String?
    city                 String?
    state                String?
    openingHours         OpeningHours[]
    canStudyForLong      String?
    vibe                 String?
    comfort              String?
    views                String?
    sunlight             Boolean?
    temperature          String?
    music                String?
    lighting             String?
    distractions         String?
    crowdedness          String?
    naturalSurroundings  String?
    proximityToAmenities String?
    drinks               Boolean?
    food                 Boolean?
    studyBreakFacilities String?

    studySpot   StudySpot @relation(fields: [studySpotId], references: [id])
    studySpotId Int

    pendingImagesToAdd    PendingImagesToAdd[]
    pendingImagesToDelete PendingImagesToDelete[]

    @@index([studySpotId])
    @@index([authorId])
}

model OpeningHours {
    id            Int          @id @default(autoincrement())
    day           Int
    openingTime   String
    closingTime   String
    StudySpot     StudySpot?   @relation(fields: [studySpotId], references: [id], onDelete: Cascade)
    studySpotId   Int?         @unique
    pendingEdit   PendingEdit? @relation(fields: [pendingEditId], references: [id])
    pendingEditId String?      @unique
}

model Image {
    id             Int    @id @default(autoincrement())
    name           String @unique
    url            String @unique
    dominantColour String @default("#fff")
    aspectRatio    Float
    height         Int
    width          Int

    user   User?   @relation("ProfilePicture", fields: [userId], references: [id], onDelete: Cascade)
    userId String? @unique

    author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
    authorId String?

    studySpot   StudySpot? @relation(fields: [studySpotId], references: [id], onDelete: Cascade)
    studySpotId Int?

    pendingEditImagesToAdd    PendingImagesToAdd[]
    pendingEditImagesToDelete PendingImagesToDelete[]

    @@index([studySpotId])
    @@index([authorId])
}

model PendingImagesToAdd {
    image   Image @relation(fields: [imageId], references: [id])
    imageId Int

    pendingEdit   PendingEdit? @relation(fields: [pendingEditId], references: [id])
    pendingEditId String

    @@id([imageId, pendingEditId])
    @@index([imageId])
    @@index([pendingEditId])
}

model PendingImagesToDelete {
    image   Image @relation(fields: [imageId], references: [id])
    imageId Int

    pendingEdit   PendingEdit? @relation(fields: [pendingEditId], references: [id])
    pendingEditId String

    @@id([imageId, pendingEditId])
    @@index([imageId])
    @@index([pendingEditId])
}
