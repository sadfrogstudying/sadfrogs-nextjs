// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                  String        @id @default(cuid())
    username            String        @unique
    email               String        @unique
    description         String        @default("")
    profilePicture      Image?        @relation("ProfilePicture")
    createdSpots        StudySpot[]
    createdPendingEdits PendingEdit[]
    authoredImages      Image[]
}

model StudySpot {
    id                   Int      @id @default(autoincrement())
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    isValidated          Boolean  @default(false)
    images               Image[]
    author               User?    @relation(fields: [authorId], references: [id], onDelete: SetNull)
    authorId             String?
    name                 String   @unique
    slug                 String   @unique
    rating               Int      @default(0) // 1-5 slider
    website              String   @default("")
    wifi                 Boolean  @default(false)
    powerOutlets         Boolean  @default(false)
    noiseLevel           String   @default("") // placeholder: quiet, normal, noisy
    venueType            String   @default("") // placeholder: cafe, library, etc.
    placeId              String   @default("")
    latitude             Float    @default(0)
    longitude            Float    @default(0)
    address              String   @default("")
    country              String   @default("")
    city                 String   @default("")
    state                String   @default("")
    canStudyForLong      Boolean?
    comfort              String   @default("") // placeholder: soft chairs, small tables, etc.
    views                String   @default("") // placeholder: trees, buildings, etc.
    sunlight             Boolean?
    temperature          String   @default("") // placeholder: cold, chilly, perfect, warm, hot
    music                String   @default("") // placeholder: jazz, classical, none, etc.
    lighting             String   @default("") // placeholder: normal, dim, bright, etc.
    distractions         String   @default("") // placeholder: none, some, many
    crowdedness          String   @default("") // placeholder: empty, some, crowded
    proximityToAmenities String   @default("") // change to amenitiesNearby - restaurants, grocery stores, etc.
    drinks               Boolean?
    food                 Boolean?
    studyBreakFacilities String   @default("") // placeholder: smoking area, lounge, etc.

    pendingEditStudySpot PendingEdit[]

    // Sorting and Filtering: Indexes can also help with sorting and filtering operations. For example, if you 
    // want to retrieve study spots sorted by their ratings, an index on the rating column allows the database 
    // to perform the sorting much faster.
    @@index([authorId])
    @@index([createdAt])
    @@index([slug])
}

model PendingEdit {
    id                   Int      @id @default(autoincrement())
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    author               User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId             String
    name                 String?
    slug                 String?
    rating               Int?
    website              String?
    wifi                 Boolean?
    powerOutlets         Boolean?
    noiseLevel           String?
    venueType            String?
    placeId              String?
    latitude             Float?
    longitude            Float?
    address              String?
    country              String?
    city                 String?
    state                String?
    canStudyForLong      Boolean?
    comfort              String?
    views                String?
    sunlight             Boolean?
    temperature          String?
    music                String?
    lighting             String?
    distractions         String?
    crowdedness          String?
    proximityToAmenities String? // change to amenitiesNearby - restaurants, grocery stores, etc.
    drinks               Boolean?
    food                 Boolean?
    studyBreakFacilities String?

    studySpot   StudySpot @relation(fields: [studySpotId], references: [id])
    studySpotId Int

    pendingImagesToAdd    Image[]
    pendingImagesToDelete PendingImageToDelete[]

    @@index([studySpotId])
    @@index([authorId])
}

model Image {
    id             Int    @id @default(autoincrement())
    name           String @unique
    url            String @unique
    dominantColour String @default("#fff")
    aspectRatio    Float
    height         Int
    width          Int

    // Recap: 
    // when user deleted, delete profile picture
    // When user deleted, don't delete authored images
    // When study spot deleted, delete images
    // When pendingEdit deleted, don't delete images
    user                      User?                  @relation("ProfilePicture", fields: [userId], references: [id], onDelete: Cascade)
    userId                    String?                @unique
    author                    User?                  @relation(fields: [authorId], references: [id], onDelete: SetNull)
    authorId                  String?
    studySpot                 StudySpot?             @relation(fields: [studySpotId], references: [id], onDelete: Cascade)
    studySpotId               Int?
    pendingEdit               PendingEdit?           @relation(fields: [pendingEditId], references: [id], onDelete: SetNull)
    pendingEditId             Int?
    pendingEditImagesToDelete PendingImageToDelete[]

    @@index([studySpotId])
    @@index([authorId])
    @@index([pendingEditId])
}

model PendingImageToDelete {
    image   Image @relation(fields: [imageId], references: [id])
    imageId Int

    pendingEdit   PendingEdit @relation(fields: [pendingEditId], references: [id])
    pendingEditId Int

    @@id([imageId, pendingEditId])
    @@index([imageId])
    @@index([pendingEditId])
}
